name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.0.0)"
        required: true

permissions:
  contents: write

jobs:
  build:
    name: Build Multi-Platform Binaries
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: punchtrunk-linux-amd64
          - goos: linux
            goarch: arm64
            name: punchtrunk-linux-arm64
          - goos: darwin
            goarch: amd64
            name: punchtrunk-darwin-amd64
          - goos: darwin
            goarch: arm64
            name: punchtrunk-darwin-arm64
          - goos: windows
            goarch: amd64
            name: punchtrunk-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # For git history in hotspots

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.x"
          cache: true

      - name: Run tests
        run: go test -v ./...

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w -X main.Version=${{ steps.version.outputs.version }}" \
            -o dist/${{ matrix.name }} ./cmd/punchtrunk

      - name: Generate checksums
        run: |
          cd dist
          sha256sum ${{ matrix.name }} > ${{ matrix.name }}.sha256

      - name: Build offline bundle
        run: |
          arch="${{ matrix.goarch }}"
          os="${{ matrix.goos }}"
          bundle_name="punchtrunk-offline-${os}-${arch}.tar.gz"
          ./scripts/build-offline-bundle.sh \
            --punchtrunk-binary dist/${{ matrix.name }} \
            --output-dir dist \
            --bundle-name "$bundle_name" \
            --target-os "$os" \
            --target-arch "$arch" \
            --no-cache \
            --force

      - name: Upload offline bundle artifact
        uses: actions/upload-artifact@v5
        with:
          name: offline-bundle-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/punchtrunk-offline-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz
            dist/punchtrunk-offline-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz.sha256
          retention-days: 7

      - name: Upload binary artifact
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.name }}
          path: |
            dist/${{ matrix.name }}
            dist/${{ matrix.name }}.sha256
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v6
        with:
          path: dist/

      - name: Prepare release assets
        run: |
          mkdir -p release
          find dist -type f \( -name "punchtrunk-*" -o -name "*.sha256" -o -name "punchtrunk-offline-*.tar.gz" \) -exec cp {} release/ \;
          ls -lah release/

      - name: Generate release notes
        id: notes
        run: |
          cat > release-notes.md << 'EOF'
          ## PunchTrunk ${{ steps.version.outputs.version }}

          ### Installation

          #### Binary Installation

          Download the binary for your platform from the assets below and add it to your PATH:

          ```bash
          # Linux AMD64
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/punchtrunk-linux-amd64 -o punchtrunk
          chmod +x punchtrunk
          sudo mv punchtrunk /usr/local/bin/

          # macOS ARM64 (M1/M2)
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/punchtrunk-darwin-arm64 -o punchtrunk
          chmod +x punchtrunk
          sudo mv punchtrunk /usr/local/bin/
          ```

          #### Offline Bundle

          Download the archive that matches your platform (e.g. `punchtrunk-offline-linux-amd64.tar.gz`) and extract it on the target host:

          ```bash
          tar -xzf punchtrunk-offline-linux-amd64.tar.gz
          export PUNCHTRUNK_HOME="$(pwd)/punchtrunk-offline-linux-amd64"
          source "${PUNCHTRUNK_HOME}/punchtrunk-airgap.env"
          ```

          The environment file wires `PUNCHTRUNK_TRUNK_BINARY` and other variables so PunchTrunk runs without additional installs. Binary checksums are provided as `.sha256` files.

          ### What's Included

          - Multi-platform binaries (Linux, macOS, Windows on AMD64/ARM64)
          - Offline bundles that include PunchTrunk, the pinned Trunk CLI, and repo config
          - SHA256 checksums for all binaries and bundles

          ### Quick Start

          ```bash
          # Initialize Trunk in your repository
          trunk init

          # Run PunchTrunk
          punchtrunk --mode fmt,lint,hotspots

          # View hotspots
          cat reports/hotspots.sarif | jq '.runs[0].results[] | {file: .locations[0].physicalLocation.artifactLocation.uri, message: .message.text}'
          ```

          ### Documentation

          - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [SARIF Schema Documentation](https://github.com/${{ github.repository }}/blob/main/docs/SARIF_SCHEMA.md)
          - [Deployment Pipeline](https://github.com/${{ github.repository }}/blob/main/docs/internal/delivery/DEPLOYMENT_PIPELINE.md)
          - [Testing Strategy](https://github.com/${{ github.repository }}/blob/main/docs/testing-strategy.md)

          ### Changelog

          EOF

          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "**Changes since ${LAST_TAG}:**" >> release-notes.md
            echo "" >> release-notes.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges >> release-notes.md
          else
            echo "**Initial release**" >> release-notes.md
          fi

          cat release-notes.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: PunchTrunk ${{ steps.version.outputs.version }}
          body_path: release-notes.md
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: release

    steps:
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Post-release summary
        run: |
          echo "✅ Release ${{ steps.version.outputs.version }} published successfully!"
          echo ""
          echo "📦 Artifacts:"
          echo "  - Binaries & bundles: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.version }}"
          echo ""
          echo "📝 Next steps:"
          echo "  - Update docs/internal/ROADMAP.md with shipped items"
          echo "  - Announce release in discussions/social media"
          echo "  - Monitor GitHub Code Scanning uploads"
