name: E2E Tests

on:
  pull_request:
    paths:
      - 'cmd/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/e2e.yml'
      - 'Makefile'
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      actions: write  # For uploading artifacts
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for git operations in tests

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.x"
          cache: true

      - name: Install git (if not present)
        run: |
          git --version || (sudo apt-get update && sudo apt-get install -y git)
          git config --global user.name "PunchTrunk E2E"
          git config --global user.email "e2e@punchtrunk.test"

      - name: Run E2E Tests
        run: |
          go test -v -timeout=10m ./cmd/punchtrunk -run "TestE2E"
        env:
          GO_TEST_TIMEOUT_SCALE: 2

      - name: Run Kitchen Sink Test
        run: |
          go test -v -timeout=5m ./cmd/punchtrunk -run "TestE2EKitchenSink"
        env:
          GO_TEST_TIMEOUT_SCALE: 2

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: e2e-test-results
          path: |
            **/reports/
            **/*.sarif
          retention-days: 7

  # Integration test with actual Trunk CLI
  integration-with-trunk:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: e2e-tests
    permissions:
      contents: read
      security-events: write  # For uploading SARIF
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Cache Trunk tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/trunk
          key: trunk-${{ runner.os }}-${{ hashFiles('.trunk/trunk.yaml') }}
          restore-keys: |
            trunk-${{ runner.os }}-

      - name: Install Trunk CLI
        run: |
          curl https://get.trunk.io -fsSL | bash -s -- -y
          echo "${HOME}/.trunk/bin" >> $GITHUB_PATH

      - name: Verify Trunk installation
        run: trunk --version

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.x"
          cache: true

      - name: Build PunchTrunk
        run: make build

      - name: Run PunchTrunk with all modes
        run: |
          ./bin/punchtrunk --mode fmt,lint,hotspots --base-branch=HEAD --verbose
        continue-on-error: true  # Lint failures shouldn't fail the test

      - name: Verify SARIF output
        run: |
          if [ ! -f reports/hotspots.sarif ]; then
            echo "ERROR: SARIF file not generated"
            exit 1
          fi
          jq empty reports/hotspots.sarif || (echo "ERROR: Invalid SARIF JSON" && exit 1)
          echo "✓ SARIF file is valid JSON"

      - name: Validate SARIF schema
        run: |
          VERSION=$(jq -r '.version' reports/hotspots.sarif)
          if [ "$VERSION" != "2.1.0" ]; then
            echo "ERROR: Expected SARIF version 2.1.0, got $VERSION"
            exit 1
          fi
          
          TOOL_NAME=$(jq -r '.runs[0].tool.driver.name' reports/hotspots.sarif)
          if [ "$TOOL_NAME" != "PunchTrunk" ]; then
            echo "ERROR: Expected tool name PunchTrunk, got $TOOL_NAME"
            exit 1
          fi
          
          echo "✓ SARIF schema validation passed"

      - name: Upload SARIF for validation
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: reports/hotspots.sarif
        continue-on-error: true  # Upload might fail in forks

  # Performance validation
  performance-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: e2e-tests
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25.x"
          cache: true

      - name: Build PunchTrunk
        run: make build

      - name: Performance test - hotspots only
        run: |
          START=$(date +%s)
          ./bin/punchtrunk --mode hotspots --base-branch=HEAD~10 --timeout=300
          END=$(date +%s)
          DURATION=$((END - START))
          echo "Hotspot computation took ${DURATION}s"
          
          # Fail if takes longer than 2 minutes for this small repo
          if [ $DURATION -gt 120 ]; then
            echo "ERROR: Hotspot computation too slow (${DURATION}s > 120s)"
            exit 1
          fi
          
          echo "✓ Performance check passed (${DURATION}s < 120s)"

      - name: Memory usage check
        run: |
          # Run with memory profiling
          /usr/bin/time -v ./bin/punchtrunk --mode hotspots --base-branch=HEAD~10 2>&1 | tee memory.log
          
          # Check maximum resident set size (in KB)
          MAX_RSS=$(grep "Maximum resident set size" memory.log | awk '{print $6}')
          MAX_MB=$((MAX_RSS / 1024))
          
          echo "Peak memory usage: ${MAX_MB} MB"
          
          # Warn if over 500MB (should be much lower for this repo)
          if [ $MAX_MB -gt 500 ]; then
            echo "WARNING: High memory usage: ${MAX_MB}MB"
          fi

  # Quality gate summary
  quality-gate:
    runs-on: ubuntu-latest
    needs: [e2e-tests, integration-with-trunk, performance-check]
    if: always()
    permissions: {}  # No permissions needed for summary
    
    steps:
      - name: Check quality gates
        run: |
          echo "=== E2E Quality Gate Summary ==="
          echo ""
          echo "✓ E2E tests: ${{ needs.e2e-tests.result }}"
          echo "✓ Integration tests: ${{ needs.integration-with-trunk.result }}"
          echo "✓ Performance checks: ${{ needs.performance-check.result }}"
          echo ""
          
          if [ "${{ needs.e2e-tests.result }}" != "success" ]; then
            echo "❌ E2E tests failed"
            exit 1
          fi
          
          if [ "${{ needs.integration-with-trunk.result }}" != "success" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [ "${{ needs.performance-check.result }}" != "success" ]; then
            echo "❌ Performance checks failed"
            exit 1
          fi
          
          echo ""
          echo "✅ All quality gates passed!"
