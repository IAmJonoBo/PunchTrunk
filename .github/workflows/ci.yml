name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  lint-and-hotspots:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Cache Trunk tools (ephemeral-friendly)
      - name: Cache Trunk tools
        uses: actions/cache@v4
        with:
          path: ~/.cache/trunk
          key: trunk-${{ runner.os }}-${{ hashFiles('.trunk/trunk.yaml') }}

      # Trunk meta-linter annotations
      - name: Trunk Check (annotations)
        uses: trunk-io/trunk-action@v1
        with:
          arguments: check

      # Install Go and build the CLI
      - uses: actions/setup-go@v6
        with:
          go-version: 1.25.x

      - name: Build PunchTrunk CLI
        run: |
          mkdir -p bin
          go build -o bin/punchtrunk ./cmd/punchtrunk

      - name: Runner preflight (hydrate + tool-health)
        run: |
          bash scripts/prep-runner.sh \
            --config-dir=.trunk \
            --cache-dir="$HOME/.cache/trunk" \
            --punchtrunk=./bin/punchtrunk \
            --json-output=reports/preflight.json
        continue-on-error: true
        id: prep_runner

      - name: Upload preflight report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: punchtrunk-preflight
          path: |
            reports/preflight.json
            reports/tool-health-preflight.json
            reports/tool-health-preflight.md
            reports/tool-health-preflight.log
          if-no-files-found: ignore
          retention-days: 7

      # Run tests
      - name: Run tests
        run: |
          go test -v -timeout=5m ./...

      # Setup Python for Semgrep
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.x'

      # Semgrep security scan
      - name: Semgrep security scan
        run: |
          pip install semgrep
          semgrep --config=semgrep/offline-ci.yml --metrics=off .
        continue-on-error: false

      - name: Run PunchTrunk hotspots
        run: |
          ./bin/punchtrunk --mode hotspots --base-branch=origin/${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || 'main' }}

      # Upload SARIF to GitHub Code Scanning
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: reports/hotspots.sarif

      # Optional: reviewdog for extra comments (disabled by default)
      # - uses: reviewdog/action-setup@v1
      # - name: ESLint via reviewdog (example)
      #   run: |
      #     npx eslint -f checkstyle . | reviewdog -f=checkstyle -reporter=github-pr-review -filter-mode=diff_context -fail-on-error
